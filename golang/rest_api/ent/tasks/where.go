// Code generated by ent, DO NOT EDIT.

package tasks

import (
	"rest_api/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tasks {
	return predicate.Tasks(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tasks {
	return predicate.Tasks(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tasks {
	return predicate.Tasks(sql.FieldLTE(FieldID, id))
}

// TaskName applies equality check predicate on the "taskName" field. It's identical to TaskNameEQ.
func TaskName(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldTaskName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldStatus, v))
}

// TaskNameEQ applies the EQ predicate on the "taskName" field.
func TaskNameEQ(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldTaskName, v))
}

// TaskNameNEQ applies the NEQ predicate on the "taskName" field.
func TaskNameNEQ(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldNEQ(FieldTaskName, v))
}

// TaskNameIn applies the In predicate on the "taskName" field.
func TaskNameIn(vs ...string) predicate.Tasks {
	return predicate.Tasks(sql.FieldIn(FieldTaskName, vs...))
}

// TaskNameNotIn applies the NotIn predicate on the "taskName" field.
func TaskNameNotIn(vs ...string) predicate.Tasks {
	return predicate.Tasks(sql.FieldNotIn(FieldTaskName, vs...))
}

// TaskNameGT applies the GT predicate on the "taskName" field.
func TaskNameGT(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldGT(FieldTaskName, v))
}

// TaskNameGTE applies the GTE predicate on the "taskName" field.
func TaskNameGTE(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldGTE(FieldTaskName, v))
}

// TaskNameLT applies the LT predicate on the "taskName" field.
func TaskNameLT(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldLT(FieldTaskName, v))
}

// TaskNameLTE applies the LTE predicate on the "taskName" field.
func TaskNameLTE(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldLTE(FieldTaskName, v))
}

// TaskNameContains applies the Contains predicate on the "taskName" field.
func TaskNameContains(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldContains(FieldTaskName, v))
}

// TaskNameHasPrefix applies the HasPrefix predicate on the "taskName" field.
func TaskNameHasPrefix(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldHasPrefix(FieldTaskName, v))
}

// TaskNameHasSuffix applies the HasSuffix predicate on the "taskName" field.
func TaskNameHasSuffix(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldHasSuffix(FieldTaskName, v))
}

// TaskNameEqualFold applies the EqualFold predicate on the "taskName" field.
func TaskNameEqualFold(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldEqualFold(FieldTaskName, v))
}

// TaskNameContainsFold applies the ContainsFold predicate on the "taskName" field.
func TaskNameContainsFold(v string) predicate.Tasks {
	return predicate.Tasks(sql.FieldContainsFold(FieldTaskName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Tasks {
	return predicate.Tasks(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Tasks {
	return predicate.Tasks(sql.FieldNEQ(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tasks) predicate.Tasks {
	return predicate.Tasks(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tasks) predicate.Tasks {
	return predicate.Tasks(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tasks) predicate.Tasks {
	return predicate.Tasks(sql.NotPredicates(p))
}
